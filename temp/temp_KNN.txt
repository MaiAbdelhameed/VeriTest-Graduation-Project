with torch.no_grad():
    model.eval()
    train_embeddings = model(train_data).detach().numpy()
    test_embeddings = model(test_data).detach().numpy()

# Use node embeddings as features for classical ML model (e.g., logistic regression)
X_train, y_train = train_embeddings, train_data.y.numpy()
X_test, y_test = test_embeddings, test_data.y.numpy()
knn_classifier = KNeighborsClassifier(n_neighbors=5)  # Specify the number of neighbors
knn_classifier.fit(X_train, y_train)

# Evaluate classical ML model (KNN)
knn_y_pred = knn_classifier.predict(X_test)
knn_accuracy = accuracy_score(y_test, knn_y_pred)
print("KNN Accuracy:", knn_accuracy)
